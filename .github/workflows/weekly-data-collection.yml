name: Weekly Gym Data Collection

on:
  schedule:
    # 毎週日曜日 00:01 JST (土曜日 15:01 UTC)
    - cron: '1 15 * * 6'
  workflow_dispatch: # 手動実行も可能

env:
  TZ: Asia/Tokyo

jobs:
  collect-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Python OCR Environment
        run: |
          # Python OCR環境のセットアップ
          echo "🔧 本番用Python OCR環境を準備中..."
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-jpn
          sudo apt-get install -y libgl1-mesa-dev libglib2.0-0 libsm6 libxext6 libfontconfig1 libxrender1
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          echo "✅ Python OCR環境構築完了"
          echo "📊 Python バージョン: $(python --version)"
          echo "🔍 Tesseract バージョン: $(tesseract --version | head -1)"

      - name: Check for new screenshots
        id: check-images
        run: |
          # 新しいスクリーンショット画像があるかチェック
          if [ -d "screenshots/inbox" ] && [ "$(ls -A screenshots/inbox)" ]; then
            echo "new-images=true" >> $GITHUB_OUTPUT
            echo "📸 新しいスクリーンショットを発見しました"
          else
            echo "new-images=false" >> $GITHUB_OUTPUT
            echo "📭 新しいスクリーンショットはありませんでした"
          fi

      - name: Process screenshots with Python OCR
        if: steps.check-images.outputs.new-images == 'true'
        run: |
          echo "🤖 本番用Python OCRで画像を処理中..."
          python scripts/python_ocr_processor.py

      - name: Update CSV data
        if: steps.check-images.outputs.new-images == 'true'
        run: |
          echo "📊 CSVデータを更新中..."
          node scripts/update-csv.js

      - name: Archive processed images
        if: steps.check-images.outputs.new-images == 'true'
        run: |
          echo "🗃️ 処理済み画像をアーカイブ中..."
          timestamp=$(date +%Y%m%d_%H%M%S)
          mkdir -p screenshots/processed/$timestamp
          mv screenshots/inbox/* screenshots/processed/$timestamp/ || true

      - name: Commit and push changes
        if: steps.check-images.outputs.new-images == 'true'
        run: |
          git config --local user.email "iori730002204294@gmail.com"
          git config --local user.name "iori73"
          # Add files that exist
          [ -f "public/fit_place24_data.csv" ] && git add public/fit_place24_data.csv
          [ -d "screenshots/" ] && git add screenshots/
          [ -f "scripts/extracted-data.json" ] && git add scripts/extracted-data.json
          [ -f "scripts/weekly-report.md" ] && git add scripts/weekly-report.md

          # Only commit if there are changes
          if ! git diff --cached --exit-code > /dev/null; then
            COMMIT_DATE=$(date '+%Y-%m-%d %H:%M')
            git commit -m "Weekly data update ${COMMIT_DATE}"
            git push
          else
            echo "📭 変更がないためコミットをスキップしました"
          fi

      - name: Handle errors and notifications
        if: failure()
        run: |
          echo "❌ 処理中にエラーが発生しました"
          echo "📋 GitHub Issueを確認してください"
          # Create GitHub issue on failure (optional)
          # gh issue create --title "自動データ収集エラー $(date)" --body "週次データ収集処理でエラーが発生しました。ログを確認してください。"

      - name: Generate weekly report
        if: steps.check-images.outputs.new-images == 'true'
        run: |
          echo "📈 週次レポートを生成中..."
          node scripts/generate-report.js

      - name: Run performance analysis
        if: steps.check-images.outputs.new-images == 'true'
        run: |
          echo "🔍 パフォーマンス分析を実行中..."
          node scripts/performance-analyzer.js

      - name: Summary
        run: |
          echo "✅ 週次データ収集処理が完了しました"
          echo "📅 実行日時: $(date '+%Y-%m-%d %H:%M:%S JST')"
          if [ "${{ steps.check-images.outputs.new-images }}" == "true" ]; then
            echo "📊 新しいデータを処理しました"
          else
            echo "📭 新しいデータはありませんでした"
          fi
